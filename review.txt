<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat UI</title>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css" rel="stylesheet" />
    <link rel="stylesheet" href="style.css">
</head>

<body>

    <p id="initial-warning" class="initial-warning">
        <i class="ri-error-warning-line"></i><br>
        Seema-AI es un chabot que tiene como único fin el acompañamiento y la asesoría de manera general.
        <strong>
            No reemplaza la consulta con un profesional de la salud mental.
        </strong>
    </p>

    <h2 class="header-title">Seema-AI <i style="font-weight: normal;" class="ri-brain-2-line"></i></h2>

    <div class="chat-container">
        <div id="chat-gradient" class="chat-gradient-top"></div>
        <div id="chat" class="chat-box">
            <div class="chat-messages"></div>
        </div>

        <div class="chat-input">
            <textarea id="mensaje" placeholder="Escribe tu mensaje..." rows="1"></textarea>
            <button type="button" id="btn-send-message">
                <i id="icon-sending" class="ri-send-plane-fill"></i>
                <i id="icon-stop" class="ri-stop-circle-fill oculto" tabindex="0"></i>
            </button>
        </div>

    </div>

</body>

<script src="script.js"></script>

</html>

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

:root {
    --max-width: 750px;
    --min-width: 300px;
    --optimus-width: 90vw;

    --primary-color: #7479e8;
    --secondary-color: #7479e8;
    --tertiary-color: #fff;

    --title-color: var(--secondary-color);
    --subtitle-color: #4a4969;
    --paragraph-color: #1c1c1c;

    --primary-background-color: #fafbfd;
    --secondary-background-color: #b2b2e4;
    --tertiary-background-color: #efeffb;
    --quaternary-background-color: var(--title-color);

    --button-color: #fff;

    --border-color: var(--primary-color);

    /* status colors */
    --information-color: #f8e059;
    --warning-color: #ff3131;
    --sucess-color: #16b847;

}

body {
    height: 100vh;
    padding: 2rem 1.5rem;
    background: linear-gradient(180deg, var(--primary-background-color) 60%, var(--secondary-background-color));
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    position: relative;
}

.initial-warning {
    color: var(--paragraph-color);
    opacity: 0.7;
    text-align: center;
    position: absolute;
    top: 40%;
    width: clamp(var(--min-width), var(--optimus-width), 500px);
}

.header-title {
    color: var(--primary-color);
    animation: slideShrink 0.6s ease-out forwards;
}

@keyframes slideShrink {
    0% {
        transform: translateY(-50px) scale(1.5);
        opacity: 0;
    }

    100% {
        transform: translateY(0) scale(1);
        opacity: 1;
    }
}

.chat-container {
    height: 90vh;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    gap: 0.5rem;

    border-radius: 0.3rem;

    width: clamp(var(--min-width), var(--optimus-width), var(--max-width));
    overflow: hidden;
    position: relative;
}

.chat-gradient-top {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100px;
    background: linear-gradient(to bottom, rgba(250, 251, 253, 1), rgba(250, 251, 253, .5) 50%, rgba(250, 251, 253, 0)75%);
    pointer-events: none;
    opacity: 0;
    z-index: 2;
    transition: opacity 0.3s ease;
}

.copied {
    display: inline-block;
    margin-left: 0.5rem;
    font-size: 0.85rem;
    color: var(--primary-color);
    animation: fadeIn 0.3s ease forwards;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateX(-20px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }
}

.chat-box {
    flex: 1;
    width: 100%;
    overflow-y: auto;
    border-radius: 0.3rem;
    padding: 1.5rem 0 0.5rem 0;
    display: flex;
    flex-direction: column;
    align-items: end;
    position: relative;
    scrollbar-width: thin;
    scrollbar-color: #ccc transparent;
}

.chat-box::-webkit-scrollbar {
    width: 8px;
}

.chat-box::-webkit-scrollbar-track {
    background: transparent;
}

.chat-box::-webkit-scrollbar-thumb {
    background-color: #ccc;
    border-radius: 8px;
    transition: background-color 0.3s;
}

.chat-box::-webkit-scrollbar-hover {
    background: #999;
}

.chat-messages {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: auto;
    align-items: end;
    width: 100%;
}


.ai-response {
    color: var(--paragraph-color);
    max-width: 88%;
    margin-right: auto;
    animation: slideUp 0.4s ease-out forwards;
}

.thinking-error .ri-brain-2-line {
    color: var(--warning-color);
}

.header-title .ri-brain-2-line {
    color: var(--primary-color);
}

.ri-brain-2-line {
    color: var(--secondary-color);
}

.ai-answer {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    border-radius: 0.5rem;
    color: var(--paragraph-color);
    font-size: 1rem;
    padding: 0.6rem 0.8rem;
    transition: margin-bottom 0.15s ease;
    background: var(--tertiary-background-color);
}

.ri-file-copy-line {
    margin-left: 0.3rem;
}

.ri-file-copy-line:hover {
    color: hsl(from var(--primary-color) h s calc(l - 15));
}

.message {
    border-radius: 0.3rem;
    font-size: 1rem;
    padding: 0.6rem 0.8rem;
    max-width: 88%;
    background: var(--quaternary-background-color);
    color: white;
    animation: slideUp 0.4s ease-out forwards;
    text-align: right;
}

@keyframes slideUp {
    0% {
        transform: translateY(-30px);
        opacity: 0;
    }

    100% {
        transform: translateY(0);
        opacity: 1;
    }
}

.chat-input {
    background-color: var(--tertiary-background-color);
    outline: none;
    width: 100%;
    display: flex;
    align-items: end;
    justify-content: space-between;
    border-radius: 0.5rem;
    padding: 0.5rem;
    gap: 0.5rem;
}

.chat-input textarea {
    border: none;
    resize: none;
    overflow-y: auto;
    font-size: 1rem;
    line-height: 1.2rem;
    max-height: calc(1.2rem * 10);
    background: transparent;
    color: var(--paragraph-color);
    padding: 0.5rem;
    width: 100%;
}

.chat-input textarea:focus {
    outline: none;
    border: none;
}

#mensaje::-webkit-scrollbar {
    width: 8px;
}

#mensaje::-webkit-scrollbar-track {
    background: transparent;
}

#mensaje::-webkit-scrollbar-thumb {
    background-color: #ccc;
    border-radius: 8px;
    transition: background-color 0.3s;
}

#mensaje::-webkit-scrollbar-thumb:hover {
    background: #999;
}

#mensaje {
    scrollbar-color: #ccc transparent;
    scrollbar-width: thin;
}

#mensaje::placeholder {
    color: var(--paragraph-color);
    opacity: 0.8;
}

.chat-input button {
    border: none;
    display: block;
    color: var(--primary-color);
    background: transparent;
    width: 35px;
    height: 35px;
    border-radius: 50%;
    font-size: 1.35rem;
    transition: all 0.2s ease;
}

.chat-input button:hover {
    color: hsl(from var(--sucess-color) h s calc(l + 10));
    transform: translateY(-3px) translateX(3px);
}

.chat-input button:focus {
    color: hsl(from var(--sucess-color) h s calc(l + 10));
    outline: none;
}

.thinking {
    width: 100%;
    display: inline-block;
    color: var(--quaternary-background-color);
    font-size: 0.9rem;
    text-align: left;
}

.thinking::after {
    content: '';
    display: inline-block;
    width: 1ch;
    text-align: left;
    animation: thinking-appear 1.5s steps(3, end) infinite;
}

@keyframes thinking-appear {
    0% {
        content: '';
    }

    33% {
        content: '.';
    }

    66% {
        content: '..';
    }

    100% {
        content: '...';
    }
}

.thinking-error {
    width: 100%;
    display: inline-block;
    color: var(--warning-color);
    font-size: 0.9rem;
    text-align: left;
}

@media (max-width: 768px) {

    body{
        height: 90vh;
    }

    .chat-box::-webkit-scrollbar {
        display: none;
    }

    .chat-box {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
}

.oculto {
    display: none;
}

function escapeHTML(texto) {
    const div = document.createElement("div");
    div.innerText = texto;
    return div.innerHTML;
}

const textarea = document.getElementById("mensaje");

textarea.addEventListener('input', () => {
    textarea.style.height = 'auto';
    textarea.style.height = textarea.scrollHeight + 'px';
});

const btnSendMessage = document.getElementById('btn-send-message');

btnSendMessage.addEventListener("click", function () {
    enviarMensaje();
    iconSending.classList.add("oculto");
    iconStop.classList.remove("oculto");
});

btnSendMessage.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
        if (!iconStop.classList.contains("oculto")) {
            e.preventDefault();
            iconStop.click();
            textarea.focus();
        }
    }
});

textarea.addEventListener("keydown", function (e) {
    if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();

        enviarMensaje();
    }
});

const chat = document.getElementById("chat");
const gradient = document.getElementById("chat-gradient");

chat.addEventListener('scroll', () => {
    const shouldShow = chat.scrollTop > 10;
    gradient.style.opacity = shouldShow ? "1" : "0";
});

const iconSending = document.getElementById("icon-sending");
const iconStop = document.getElementById("icon-stop");

iconStop.addEventListener("click", cancelarPeticion);
iconStop.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
        e.preventDefault();
        iconStop.click();
        textarea.focus();
    }
});


let currentAbortController = null;
let currentThinkingMessage = null;

async function enviarMensaje() {
    const messageText = textarea.value.trim();
    document.getElementById("initial-warning").style.display = "none";

    if (messageText !== "") {

        const newMessage = document.createElement("div");
        newMessage.className = "message";

        const safeText = escapeHTML(messageText);

        const formattedMessage = safeText.replace(/\n/g, "<br>");

        newMessage.innerHTML = formattedMessage

        iconSending.classList.add("oculto");
        iconStop.classList.remove("oculto");
        document.querySelector(".chat-messages").appendChild(newMessage);

        if (currentAbortController) {
            currentAbortController.abort();
        }

        const controller = new AbortController();
        currentAbortController = controller;

        const thinkingMessage = document.createElement("p");
        thinkingMessage.className = "thinking";
        currentThinkingMessage = thinkingMessage;

        document.querySelector(".chat-messages").appendChild(thinkingMessage);

        const alt = Math.random();

        if (alt <= 0.25) {
            thinkingMessage.innerHTML = '<i class="ri-brain-2-line"></i> Analizando la respuesta';
        } else if (alt <= 0.5) {
            thinkingMessage.innerHTML = '<i class="ri-brain-2-line"></i> Conectando ideas';
        } else if (alt <= 0.75) {
            thinkingMessage.innerHTML = '<i class="ri-brain-2-line"></i> Reflexionando';
        } else {
            thinkingMessage.innerHTML = '<i class="ri-brain-2-line"></i> Ordenando los pensamientos';
        }


        textarea.value = "";
        textarea.style.height = "auto";

        chat.scrollTop = chat.scrollHeight;

        try {
            const response = await fetch("https://testserver-575l.onrender.com/webhook/aitest", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    mensaje: messageText,
                    sessionId: obtenerUsuarioID()
                }),
                signal: controller.signal
            });

            const data = await response.json();

            // Eliminar mensaje de espera
            if (currentThinkingMessage) {
                currentThinkingMessage.remove();
                currentThinkingMessage = null;
            }

            // Crear respuesta IA
            const aiResponse = document.createElement("div");
            aiResponse.className = "ai-response";

            const icon = document.createElement("i");
            icon.className = "ri-brain-2-line";
            icon.style.fontWeight = "normal";

            const p = document.createElement("p");
            p.className = "ai-answer";

            const copyIcon = document.createElement("i");
            copyIcon.className = "ri-file-copy-line";
            copyIcon.style.fontWeight = "normal";

            // Inserta el texto seguro, preservando saltos de línea
            p.innerHTML = escapeHTML(data.respuesta || "Lo siento, no entendí.").replace(/\n/g, "<br>");

            aiResponse.appendChild(icon);
            aiResponse.appendChild(p);
            p.appendChild(copyIcon)

            document.querySelector(".chat-messages").appendChild(aiResponse);

            // Scroll hacia abajo nuevamente
            chat.scrollTop = chat.scrollHeight;

            iconSending.classList.remove("oculto");
            iconStop.classList.add("oculto");

        } catch (error) {
            if (error.name === 'AbortError') {
                console.log("Solicitud cancelada por el usuario.")
            } else {
                if (currentThinkingMessage) {
                    currentThinkingMessage.className = "thinking-error";
                    currentThinkingMessage.innerHTML = '<i class="ri-error-warning-line"></i> Ocurrió un error, intenta de nuevo.';
                    currentThinkingMessage = null;
                }
                console.error("Error al conectar con el servidor:", error);
            }

            iconStop.classList.add("oculto");
            iconSending.classList.remove("oculto");
        }
    }
};

//Lógica de copiado de mensaje
document.querySelector(".chat-messages").addEventListener("click", function (e) {
    if (e.target.classList.contains("ri-file-copy-line")) {
        const pElement = e.target.closest(".ai-answer");
        if (!pElement) return;

        const textToCopy = pElement.innerText.trim();
        const parent = e.target.closest(".ai-response");
        const iconBrain = parent?.querySelector(".ri-brain-2-line");

        navigator.clipboard.writeText(textToCopy).then(() => {
            const copiedMsg = document.createElement("span");
            copiedMsg.className = "copied";
            copiedMsg.innerHTML = '<i class="ri-check-line"></i> Copiado';

            if (parent && iconBrain) {
                // Insertar al lado derecho del icono de cerebro
                iconBrain.insertAdjacentElement("afterend", copiedMsg);

                setTimeout(() => {
                    copiedMsg.style.animation = "slideLeft 0.3s ease-in-out forwards";
                    setTimeout(() => {
                        copiedMsg.remove();
                    }, 1000);
                }, 2000);
            }
        }).catch(err => {
            console.error("Error al copiar al portapapeles:", err);
        });
    }
});


function cancelarPeticion() {
    if (currentAbortController) {
        currentAbortController.abort();
        currentAbortController = null;
    }

    if (currentThinkingMessage) {
        currentThinkingMessage.className = "thinking-error"
        currentThinkingMessage.innerHTML = '<i class="ri-brain-2-line"></i> Petición cancelada por el usuario.';
        currentThinkingMessage = null;
    }

    requestAnimationFrame(() => {
        iconStop.classList.add("oculto");
        iconSending.classList.remove("oculto");
    });

    textarea.focus();
};

function obtenerUsuarioID() {
    const idGuardado = localStorage.getItem("usuario_id");

    if (idGuardado) {
        return idGuardado;
    } else {
        const nuevoID = crypto.randomUUID(); // genera un UUID único  
        localStorage.setItem("usuario_id", nuevoID);
        return nuevoID;
    }
}

